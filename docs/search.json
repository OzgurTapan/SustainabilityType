[
  {
    "objectID": "sustainability.html",
    "href": "sustainability.html",
    "title": "Weak & Strong Sustainability",
    "section": "",
    "text": "Sustainability refers to the ability to maintain or support enviromental, social and economic resources continuously over time.\n\n\n\nEnviromental, social and economic resources are essentially substitutable and considers that there are no essential differences between the kinds of well-being they generate.1,2,3\n\nThe only thing that matters is the total value of the resources, which should be at least maintained or ideally increased for future generations.4\n\nIt does not matter whether the current generation uses up nonrenewable resources as long as the same amount of economic and social advancement achieved.2\nIn this perspective technological progress is assumed to continually generate technical solutions to the environmental problems caused by the increased production of goods and services.1\n\n\n\n\n\nRather enviromental resources is a set of complex systems consisting of evolving biotic and abiotic elements that interact in ways that determine the ecosystem’s capacity to provide human society directly and/or indirectly with a wide array of functions and services.1,5\nThus enviromental resources cannot be substitutable.\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\n\nlibrary(shiny)\nlibrary(munsell)\nlibrary(magrittr)\nlibrary(tidyverse)\nlibrary(ggiraph)\n\n#Data\nsus25_df &lt;- read.csv(\"https://github.com/OzgurTapan/SustainabilityType/blob/main/data/SDR_2025_TIMESERIES_(Backdated_Data).csv\") %&gt;% \n  select(Country,\n         year,\n         sdgi_s,\n         contains(\"goal\"),\n         ObjectId)\n\n#Line chart data\nsus25_filtered &lt;- sus25_df %&gt;%\n  rowwise() %&gt;%\n  mutate(economic_resources =\n           mean(c(goal1, goal2, goal3, goal8, goal9), na.rm=T),\n         enviromental_resources =\n           mean(c(goal6,goal7, goal12, goal13, goal14, goal15), na.rm=T),\n         social_resources =\n           mean(c(goal4, goal5, goal10, goal11, goal16, goal17), na.rm=T),\n         total_resources =\n           mean(c(economic_resources, enviromental_resources, social_resources), na.rm=T)\n  ) %&gt;% \n  ungroup() %&gt;%\n  nest(.by = Country,\n       .key = \"data\")\n\n# Special cases\n# Türkiye to Turkey for better encoding support\nsus25_filtered[177,1] &lt;- \"Turkey\"\n# Area name correction\nsus25_filtered[178,1] &lt;- \"French Polynesia\"\n# Attribute values cannot contain single quote \"'\". Cote d'Ivoire\nsus25_filtered[44,1] &lt;- \"Ivory Coast\"\n\n\nsus25_filtered &lt;- sus25_filtered %&gt;%\n  mutate(data = map(data,\n                    ~mutate(., enviromental_resources_dif =\n                              enviromental_resources - lag(enviromental_resources)))) %&gt;%\n  mutate(data = map(data,\n                    ~mutate(., total_resources_dif =\n                              total_resources - lag(total_resources)))) %&gt;%\n  unnest(data)\n\n#Map coordinates\nmap_outlines &lt;- map_data(\"world\") %&gt;%\n  select(long,\n         lat,\n         region,\n         group)\n\n\n\nmap_outlines &lt;- mutate(map_outlines,\n                       region = case_match(region,\n                                           \"Antigua\" ~ \"Antigua and Barbuda\",\n                                           \"Barbuda\" ~ \"Antigua and Barbuda\",\n                                           \"Bahamas\" ~ \"Bahamas, The\",\n                                           \"Brunei\" ~ \"Brunei Darussalam\",\n                                           \"Republic of Congo\" ~ \"Congo, Rep.\",\n                                           \"Cape Verde\" ~ \"Cabo Verde\",\n                                           #\"Ivory Coast\" ~ \"Cote d'Ivoire\",\n                                           \"Czech Republic\" ~ \"Czechia\",\n                                           \"Democratic Republic of the Congo\" ~ \"Congo, Dem. Rep.\",\n                                           \"UK\" ~ \"United Kingdom\",\n                                           \"Micronesia\" ~ \"Micronesia, Fed. Sts.\",\n                                           \"Egypt\" ~ \"Egypt, Arab Rep.\",\n                                           \"Iran\" ~ \"Iran, Islamic Rep.\",\n                                           \"Gambia\" ~ \"Gambia, The\",\n                                           \"Laos\" ~ \"Lao PDR\",\n                                           \"Kyrgyzstan\" ~ \"Kyrgyz Republic\",\n                                           \"Saint Kitts\" ~ \"St. Kitts and Nevis\",\n                                           \"South Korea\" ~ \"Korea, Rep.\",\n                                           \"Saint Lucia\" ~ \"St. Lucia\",\n                                           \"North Korea\" ~ \"Korea, Dem. Rep.\",\n                                           \"Russia\" ~ \"Russian Federation\",\n                                           \"Slovakia\" ~ \"Slovak Republic\",\n                                           \"Trinidad\" ~ \"Trinidad and Tobago\",\n                                           \"Tobago\" ~ \"Trinidad and Tobago\",\n                                           \"Swaziland\" ~ \"Eswatini\",\n                                           \"Syria\" ~ \"Syrian Arab Republic\",\n                                           #\"Turkey\" ~ \"Türkiye\",\n                                           #\"French Polynesia\" ~ \"Tuvalu\",\n                                           \"Saint Vincent\" ~ \"St. Vincent and the Grenadines\",\n                                           \"Grenadines\" ~ \"St. Vincent and the Grenadines\",\n                                           \"USA\" ~ \"United States\",\n                                           \"Yemen\" ~ \"Yemen, Rep.\",\n                                           \"Venezuela\" ~ \"Venezuela, RB\",\n                                           .default = region\n                       )\n)\n\n# Check for different country names\n# view(anti_join(unique(select(sus25_filtered, Country)),\n               # unique(select(map_outlines, region)),\n               # by = c(\"Country\" = \"region\")\n# )\n# )\n\n\nsus25_filtered &lt;- sus25_filtered %&gt;% inner_join(x = sus25_filtered,\n                                                y = unique(select(map_outlines, region)),\n                                                by = c(\"Country\" = \"region\")\n                                                )\n\n\n\n\n# ui\nui &lt;- fluidPage(\n  fluidRow(column(selectInput(\"year\",\n                              label = \"Year:\",\n                              choices = unique(sus25_filtered$year),\n                              selected = \"2024\"\n                              ),\n                  girafeOutput(\"my_map\"),\n                  width = 12\n                  )\n           ),\n  \n  fluidRow(column(width = 12,\n                  girafeOutput(\"my_plot\")\n                  )\n           )\n)\n\n\n# server\nserver &lt;- function(input, output){\n  output$my_map &lt;- renderGirafe({\n    girafe_map &lt;- sus25_filtered %&gt;%\n      filter(year == input$year) %&gt;%\n      ggplot() +\n      geom_map_interactive(map = map_outlines, \n                           aes(map_id = Country,\n                               color = \"black\",\n                               fill = total_resources,\n                               # color = case_when(total_resources_dif &lt; 0 ~ \"red\",\n                                                 # total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~ \"yellow\",\n                                                 # total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~ \"green\"\n                                                 # ),\n                               data_id = Country,\n                               tooltip = paste0(Country,\n                                                \"&lt;br&gt;\",\n                                                case_when(total_resources_dif &lt; 0 ~\n                                                            \"Recessed Sustainability\",\n                                                          total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~\n                                                            \"Weak Sustainability\",\n                                                          total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~\n                                                            \"Strong Sustainability\"\n                                                          ),\n                                                \" &lt;br&gt;Score: \", round(total_resources, 1)\n                                                )\n                               ),\n                           linewidth = 0.1\n                           ) +\n      scale_color_identity() +\n      scale_fill_distiller(palette =\"RdYlGn\",\n                           direction = 1\n                           ) +\n      \n      expand_limits(x=map_outlines$long,\n                    y=map_outlines$lat\n                    ) +\n      \n      coord_fixed(1.3) +\n      #scale_y_continuous(expand = expansion(mult = c(0, 0))) +\n      \n      labs(title = \"Sustainability Score Map\",\n           subtitle = \"Click on a country for analysing its sustainability type\",\n           fill = \"Score\"\n           ) +\n      \n      theme(\n            axis.text = element_blank(),\n            #axis.line = element_blank(),\n            axis.ticks = element_blank(),\n            #panel.border = element_blank(),\n            panel.grid = element_blank(),\n            axis.title = element_blank(),\n            #panel.background = element_rect(fill = \"white\"),\n            #plot.title = element_text()\n            )\n    \n    girafe(code = print(girafe_map),\n           options = list(opts_hover(css = \"fill:blue;cursor:pointer;\"),\n                          opts_selection(css = \"fill-opacity:1;\",\n                                         type = \"single\")\n                          )\n           )\n  })\n  \n  \n# Drawing diagram inside modal dialog\n  \n  observeEvent(input$my_map_selected,{\n    showModal(modalDialog(\n      #tags$caption(\"Yearly Sustainability Type Change\"),\n      renderGirafe({\n        girafe_line &lt;- sus25_filtered %&gt;%\n          filter(Country == input$my_map_selected) %&gt;%\n          ggplot(aes(year)) +\n          \n          geom_line(aes(y=economic_resources),\n                    color = \"blue\",\n                    linewidth=1.5\n          ) +\n          # geom_point_interactive(aes(y=economic_resources,\n                                     # data_id = economic_resources ,\n                                     # tooltip = round(economic_resources, 1)\n          # ),\n          # color = \"gray\",\n          # hover_nearest = TRUE\n          # ) +\n          \n          geom_line(aes(y=enviromental_resources),\n                    color = \"cyan2\",\n                    linewidth=1.5\n          ) +\n          \n          geom_line(aes(y=social_resources),\n                    color = \"purple\",\n                    linewidth=1.5\n          ) +\n          \n          geom_rect(\n            aes(xmin = lag(year),\n                xmax = year,\n                fill = case_when(\n                  total_resources_dif &lt; 0 ~ \"red\",\n                  total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~ \"yellow\",\n                  total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~ \"green\"\n                )\n            ),\n            ymin = -Inf, ymax = Inf, alpha = 0.2\n          ) +\n          \n          scale_fill_identity() +\n          \n          geom_text(aes(x = year-0.5,\n                        y = -Inf,\n                        label = case_when(\n                          total_resources_dif &lt; 0 ~ \"Recession\",\n                          total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~ \"Weak\",\n                          total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~ \"Strong\")\n          ),\n          angle = 90, hjust = 0\n          ) +\n          \n          geom_text(aes(x=last(year),\n                        y=max(economic_resources),\n                        label = \"Economic\"\n          ),\n          color=\"blue\",\n          vjust=-1\n          ) +\n          \n          geom_text(aes(x=last(year),\n                        y=max(enviromental_resources),\n                        label = \"Enviromental\"\n          ),\n          color=\"cyan2\",\n          vjust=-1\n          ) +\n          \n          geom_text(aes(x=last(year),\n                        y=max(social_resources),\n                        label = \"Social\"\n          ),\n          color=\"purple\",\n          vjust=-1\n          ) +\n          \n          scale_x_continuous(breaks = 2000:2024) +\n          scale_y_continuous(expand = expansion(mult = c(.25, 0.05))) +\n          \n          labs(title = \"Weak vs Strong Sustainability\",\n               subtitle = \"Sustainability types are relative to previous years\",\n               x = \"Year\",\n               y =\"Sustainability Score\",\n               size = 5\n          ) +\n          \n          theme(axis.text.x = element_text(angle = 45,\n                                           hjust = 1),\n                plot.margin = margin(0, 1, 0, 0, \"cm\")\n          ) +\n          coord_cartesian(clip = 'off')\n        \n        girafe(code = print(girafe_line))\n        \n        \n      })\n    ))\n  })\n  \n  \n  \n  # output$modaltable &lt;- DT::renderDataTable({\n    # car_data &lt;- data[,1:7]\n    # DT::datatable(car_data, escape = FALSE)\n  # })\n      \n\n}\n  \n\n# run app\nshinyApp(ui = ui,server = server, options = list(height = 800))\nReferences\n1) Ekins, P., Simon, S., Deutsch, L., Folke, C., De Groot, R., 2003. A framework for the practical application of the concepts of critical natural capital and strong sustainability. Ecological Economics, 44, 165–185.\n2) Neumayer, E. (2003). Weak versus strong sustainability: exploring the limits of two opposing paradigms. Edward Elgar, Northampton.\n3) Neumayer, E. (2012). Human development and sustainability. Journal of Human Development and Capabilities, 13(4), 561–579.\n4) Solow, R. (1993). An almost practical step toward sustainability. Resources Policy Volume 19, Issue 3, September 1993, Pages 162-172.\n5) Noël, J-F., O’connor, M. (1998). Strong Sustainability and Critical Natural Capital. In : Faucheux, S.,O’Connor, M., (Eds.), Valuation for Sustainable Development: Methods and Policy Indicators. Edward Elgar Publisher, Cheltenham, pp. 75–99."
  },
  {
    "objectID": "sustainability.html#analysis-of-country-wise-sustainability-type-in-terms-of-being-weak-or-strong",
    "href": "sustainability.html#analysis-of-country-wise-sustainability-type-in-terms-of-being-weak-or-strong",
    "title": "Weak & Strong Sustainability",
    "section": "",
    "text": "Sustainability refers to the ability to maintain or support enviromental, social and economic resources continuously over time.\n\n\n\nEnviromental, social and economic resources are essentially substitutable and considers that there are no essential differences between the kinds of well-being they generate.1,2,3\n\nThe only thing that matters is the total value of the resources, which should be at least maintained or ideally increased for future generations.4\n\nIt does not matter whether the current generation uses up nonrenewable resources as long as the same amount of economic and social advancement achieved.2\nIn this perspective technological progress is assumed to continually generate technical solutions to the environmental problems caused by the increased production of goods and services.1\n\n\n\n\n\nRather enviromental resources is a set of complex systems consisting of evolving biotic and abiotic elements that interact in ways that determine the ecosystem’s capacity to provide human society directly and/or indirectly with a wide array of functions and services.1,5\nThus enviromental resources cannot be substitutable.\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\n\nlibrary(shiny)\nlibrary(munsell)\nlibrary(magrittr)\nlibrary(tidyverse)\nlibrary(ggiraph)\n\n#Data\nsus25_df &lt;- read.csv(\"https://github.com/OzgurTapan/SustainabilityType/blob/main/data/SDR_2025_TIMESERIES_(Backdated_Data).csv\") %&gt;% \n  select(Country,\n         year,\n         sdgi_s,\n         contains(\"goal\"),\n         ObjectId)\n\n#Line chart data\nsus25_filtered &lt;- sus25_df %&gt;%\n  rowwise() %&gt;%\n  mutate(economic_resources =\n           mean(c(goal1, goal2, goal3, goal8, goal9), na.rm=T),\n         enviromental_resources =\n           mean(c(goal6,goal7, goal12, goal13, goal14, goal15), na.rm=T),\n         social_resources =\n           mean(c(goal4, goal5, goal10, goal11, goal16, goal17), na.rm=T),\n         total_resources =\n           mean(c(economic_resources, enviromental_resources, social_resources), na.rm=T)\n  ) %&gt;% \n  ungroup() %&gt;%\n  nest(.by = Country,\n       .key = \"data\")\n\n# Special cases\n# Türkiye to Turkey for better encoding support\nsus25_filtered[177,1] &lt;- \"Turkey\"\n# Area name correction\nsus25_filtered[178,1] &lt;- \"French Polynesia\"\n# Attribute values cannot contain single quote \"'\". Cote d'Ivoire\nsus25_filtered[44,1] &lt;- \"Ivory Coast\"\n\n\nsus25_filtered &lt;- sus25_filtered %&gt;%\n  mutate(data = map(data,\n                    ~mutate(., enviromental_resources_dif =\n                              enviromental_resources - lag(enviromental_resources)))) %&gt;%\n  mutate(data = map(data,\n                    ~mutate(., total_resources_dif =\n                              total_resources - lag(total_resources)))) %&gt;%\n  unnest(data)\n\n#Map coordinates\nmap_outlines &lt;- map_data(\"world\") %&gt;%\n  select(long,\n         lat,\n         region,\n         group)\n\n\n\nmap_outlines &lt;- mutate(map_outlines,\n                       region = case_match(region,\n                                           \"Antigua\" ~ \"Antigua and Barbuda\",\n                                           \"Barbuda\" ~ \"Antigua and Barbuda\",\n                                           \"Bahamas\" ~ \"Bahamas, The\",\n                                           \"Brunei\" ~ \"Brunei Darussalam\",\n                                           \"Republic of Congo\" ~ \"Congo, Rep.\",\n                                           \"Cape Verde\" ~ \"Cabo Verde\",\n                                           #\"Ivory Coast\" ~ \"Cote d'Ivoire\",\n                                           \"Czech Republic\" ~ \"Czechia\",\n                                           \"Democratic Republic of the Congo\" ~ \"Congo, Dem. Rep.\",\n                                           \"UK\" ~ \"United Kingdom\",\n                                           \"Micronesia\" ~ \"Micronesia, Fed. Sts.\",\n                                           \"Egypt\" ~ \"Egypt, Arab Rep.\",\n                                           \"Iran\" ~ \"Iran, Islamic Rep.\",\n                                           \"Gambia\" ~ \"Gambia, The\",\n                                           \"Laos\" ~ \"Lao PDR\",\n                                           \"Kyrgyzstan\" ~ \"Kyrgyz Republic\",\n                                           \"Saint Kitts\" ~ \"St. Kitts and Nevis\",\n                                           \"South Korea\" ~ \"Korea, Rep.\",\n                                           \"Saint Lucia\" ~ \"St. Lucia\",\n                                           \"North Korea\" ~ \"Korea, Dem. Rep.\",\n                                           \"Russia\" ~ \"Russian Federation\",\n                                           \"Slovakia\" ~ \"Slovak Republic\",\n                                           \"Trinidad\" ~ \"Trinidad and Tobago\",\n                                           \"Tobago\" ~ \"Trinidad and Tobago\",\n                                           \"Swaziland\" ~ \"Eswatini\",\n                                           \"Syria\" ~ \"Syrian Arab Republic\",\n                                           #\"Turkey\" ~ \"Türkiye\",\n                                           #\"French Polynesia\" ~ \"Tuvalu\",\n                                           \"Saint Vincent\" ~ \"St. Vincent and the Grenadines\",\n                                           \"Grenadines\" ~ \"St. Vincent and the Grenadines\",\n                                           \"USA\" ~ \"United States\",\n                                           \"Yemen\" ~ \"Yemen, Rep.\",\n                                           \"Venezuela\" ~ \"Venezuela, RB\",\n                                           .default = region\n                       )\n)\n\n# Check for different country names\n# view(anti_join(unique(select(sus25_filtered, Country)),\n               # unique(select(map_outlines, region)),\n               # by = c(\"Country\" = \"region\")\n# )\n# )\n\n\nsus25_filtered &lt;- sus25_filtered %&gt;% inner_join(x = sus25_filtered,\n                                                y = unique(select(map_outlines, region)),\n                                                by = c(\"Country\" = \"region\")\n                                                )\n\n\n\n\n# ui\nui &lt;- fluidPage(\n  fluidRow(column(selectInput(\"year\",\n                              label = \"Year:\",\n                              choices = unique(sus25_filtered$year),\n                              selected = \"2024\"\n                              ),\n                  girafeOutput(\"my_map\"),\n                  width = 12\n                  )\n           ),\n  \n  fluidRow(column(width = 12,\n                  girafeOutput(\"my_plot\")\n                  )\n           )\n)\n\n\n# server\nserver &lt;- function(input, output){\n  output$my_map &lt;- renderGirafe({\n    girafe_map &lt;- sus25_filtered %&gt;%\n      filter(year == input$year) %&gt;%\n      ggplot() +\n      geom_map_interactive(map = map_outlines, \n                           aes(map_id = Country,\n                               color = \"black\",\n                               fill = total_resources,\n                               # color = case_when(total_resources_dif &lt; 0 ~ \"red\",\n                                                 # total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~ \"yellow\",\n                                                 # total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~ \"green\"\n                                                 # ),\n                               data_id = Country,\n                               tooltip = paste0(Country,\n                                                \"&lt;br&gt;\",\n                                                case_when(total_resources_dif &lt; 0 ~\n                                                            \"Recessed Sustainability\",\n                                                          total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~\n                                                            \"Weak Sustainability\",\n                                                          total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~\n                                                            \"Strong Sustainability\"\n                                                          ),\n                                                \" &lt;br&gt;Score: \", round(total_resources, 1)\n                                                )\n                               ),\n                           linewidth = 0.1\n                           ) +\n      scale_color_identity() +\n      scale_fill_distiller(palette =\"RdYlGn\",\n                           direction = 1\n                           ) +\n      \n      expand_limits(x=map_outlines$long,\n                    y=map_outlines$lat\n                    ) +\n      \n      coord_fixed(1.3) +\n      #scale_y_continuous(expand = expansion(mult = c(0, 0))) +\n      \n      labs(title = \"Sustainability Score Map\",\n           subtitle = \"Click on a country for analysing its sustainability type\",\n           fill = \"Score\"\n           ) +\n      \n      theme(\n            axis.text = element_blank(),\n            #axis.line = element_blank(),\n            axis.ticks = element_blank(),\n            #panel.border = element_blank(),\n            panel.grid = element_blank(),\n            axis.title = element_blank(),\n            #panel.background = element_rect(fill = \"white\"),\n            #plot.title = element_text()\n            )\n    \n    girafe(code = print(girafe_map),\n           options = list(opts_hover(css = \"fill:blue;cursor:pointer;\"),\n                          opts_selection(css = \"fill-opacity:1;\",\n                                         type = \"single\")\n                          )\n           )\n  })\n  \n  \n# Drawing diagram inside modal dialog\n  \n  observeEvent(input$my_map_selected,{\n    showModal(modalDialog(\n      #tags$caption(\"Yearly Sustainability Type Change\"),\n      renderGirafe({\n        girafe_line &lt;- sus25_filtered %&gt;%\n          filter(Country == input$my_map_selected) %&gt;%\n          ggplot(aes(year)) +\n          \n          geom_line(aes(y=economic_resources),\n                    color = \"blue\",\n                    linewidth=1.5\n          ) +\n          # geom_point_interactive(aes(y=economic_resources,\n                                     # data_id = economic_resources ,\n                                     # tooltip = round(economic_resources, 1)\n          # ),\n          # color = \"gray\",\n          # hover_nearest = TRUE\n          # ) +\n          \n          geom_line(aes(y=enviromental_resources),\n                    color = \"cyan2\",\n                    linewidth=1.5\n          ) +\n          \n          geom_line(aes(y=social_resources),\n                    color = \"purple\",\n                    linewidth=1.5\n          ) +\n          \n          geom_rect(\n            aes(xmin = lag(year),\n                xmax = year,\n                fill = case_when(\n                  total_resources_dif &lt; 0 ~ \"red\",\n                  total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~ \"yellow\",\n                  total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~ \"green\"\n                )\n            ),\n            ymin = -Inf, ymax = Inf, alpha = 0.2\n          ) +\n          \n          scale_fill_identity() +\n          \n          geom_text(aes(x = year-0.5,\n                        y = -Inf,\n                        label = case_when(\n                          total_resources_dif &lt; 0 ~ \"Recession\",\n                          total_resources_dif &gt;= 0 & enviromental_resources_dif &lt; 0 ~ \"Weak\",\n                          total_resources_dif &gt;= 0 & enviromental_resources_dif &gt;= 0 ~ \"Strong\")\n          ),\n          angle = 90, hjust = 0\n          ) +\n          \n          geom_text(aes(x=last(year),\n                        y=max(economic_resources),\n                        label = \"Economic\"\n          ),\n          color=\"blue\",\n          vjust=-1\n          ) +\n          \n          geom_text(aes(x=last(year),\n                        y=max(enviromental_resources),\n                        label = \"Enviromental\"\n          ),\n          color=\"cyan2\",\n          vjust=-1\n          ) +\n          \n          geom_text(aes(x=last(year),\n                        y=max(social_resources),\n                        label = \"Social\"\n          ),\n          color=\"purple\",\n          vjust=-1\n          ) +\n          \n          scale_x_continuous(breaks = 2000:2024) +\n          scale_y_continuous(expand = expansion(mult = c(.25, 0.05))) +\n          \n          labs(title = \"Weak vs Strong Sustainability\",\n               subtitle = \"Sustainability types are relative to previous years\",\n               x = \"Year\",\n               y =\"Sustainability Score\",\n               size = 5\n          ) +\n          \n          theme(axis.text.x = element_text(angle = 45,\n                                           hjust = 1),\n                plot.margin = margin(0, 1, 0, 0, \"cm\")\n          ) +\n          coord_cartesian(clip = 'off')\n        \n        girafe(code = print(girafe_line))\n        \n        \n      })\n    ))\n  })\n  \n  \n  \n  # output$modaltable &lt;- DT::renderDataTable({\n    # car_data &lt;- data[,1:7]\n    # DT::datatable(car_data, escape = FALSE)\n  # })\n      \n\n}\n  \n\n# run app\nshinyApp(ui = ui,server = server, options = list(height = 800))\nReferences\n1) Ekins, P., Simon, S., Deutsch, L., Folke, C., De Groot, R., 2003. A framework for the practical application of the concepts of critical natural capital and strong sustainability. Ecological Economics, 44, 165–185.\n2) Neumayer, E. (2003). Weak versus strong sustainability: exploring the limits of two opposing paradigms. Edward Elgar, Northampton.\n3) Neumayer, E. (2012). Human development and sustainability. Journal of Human Development and Capabilities, 13(4), 561–579.\n4) Solow, R. (1993). An almost practical step toward sustainability. Resources Policy Volume 19, Issue 3, September 1993, Pages 162-172.\n5) Noël, J-F., O’connor, M. (1998). Strong Sustainability and Critical Natural Capital. In : Faucheux, S.,O’Connor, M., (Eds.), Valuation for Sustainable Development: Methods and Policy Indicators. Edward Elgar Publisher, Cheltenham, pp. 75–99."
  }
]